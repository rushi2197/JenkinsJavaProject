pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL_Java', defaultValue: 'https://github.com/rushi2197/myCodes_Practice.git', description: 'Git repository URL')
        string(name: 'BRANCH_NAME_Java', defaultValue: 'master', description: 'Branch to checkout')
        string(name: 'codePath', defaultValue: 'Aug_2025/BasicJavaCodes', description: 'This path has basic java codes with main method')
        string(name: 'codeName', defaultValue: 'CheckIfPalindrome', description: 'Basic default code')
        string(name: 'NUMBER', defaultValue: '10', description: 'Number to calculate factorial for')
        string(name: 'REPO_URL_Jmeter', defaultValue: 'https://github.com/rushi2197/JmeterProject.git', description: 'Git repository URL')
        string(name: 'BRANCH_NAME_Jmeter', defaultValue: 'main', description: 'Branch to checkout')
        string(name: 'JmeterScriptName', defaultValue: 'JmeterTest_DummyScript.jmx', description: 'DefaultScriptToRun')
    }

    stages {
        stage('Checkout Repos') {
            steps {
                script {
                    def checkoutRepo = { repoUrl, branch, directory = '' ->
                        if (directory?.trim()) {
                            dir(directory) {
                                git branch: branch, url: repoUrl
                            }
                        } else {
                            git branch: branch, url: repoUrl
                        }
                    }

                    checkoutRepo(params.REPO_URL_Java, params.BRANCH_NAME_Java, 'JavaProject')
                    checkoutRepo(params.REPO_URL_Jmeter, params.BRANCH_NAME_Jmeter, 'JmeterProject')
                }
            }
        }

        stage('Unzip JMeter') {
            steps {
                sh """
                    cd ${WORKSPACE}/JmeterProject
                    unzip -o apache-jmeter-5.5.zip
                """
            }
        }

        stage('Run Java Code & JMeter') {
            steps {
                script {
                    def compileAndRun = { codePath, codeName, number ->
                        sh """
                            cd ${WORKSPACE}/JavaProject/src
                            javac ${codePath}/${codeName}.java
                            java ${codePath.replaceAll('/', '.')}.$codeName $number
                        """
                    }

                    compileAndRun(params.codePath, params.codeName, params.NUMBER)

                    sh 'mkdir -p JmeterProject/Results'
                    sh """
                        nohup ${WORKSPACE}/JmeterProject/apache-jmeter-5.5/bin/jmeter -n \
                        -t ${WORKSPACE}/JmeterProject/Scripts/${params.JmeterScriptName} \
                        -l ${WORKSPACE}/JmeterProject/Results/Testrun1.csv \
                        -j ${WORKSPACE}/JmeterProject/Results/Testrun1.log &
                    """
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'JmeterProject/Results/*.csv, JmeterProject/Results/*.log', fingerprint: true
            cleanWs()
        }
    }
}
